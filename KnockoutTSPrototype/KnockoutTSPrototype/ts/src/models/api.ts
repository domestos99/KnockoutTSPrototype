/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming



export class BaseEntity implements IBaseEntity {
  id?: number | undefined;

  constructor(data?: IBaseEntity) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["Id"];
    }
  }

  static fromJS(data: any): BaseEntity {
    data = typeof data === 'object' ? data : {};
    let result = new BaseEntity();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id;
    return data;
  }
}

export interface IBaseEntity {
  id?: number | undefined;
}

export class Partner extends BaseEntity implements IPartner {
  name?: string | undefined;
  street?: string | undefined;
  city?: string | undefined;
  zip?: string | undefined;
  country?: string | undefined;
  ic?: string | undefined;
  dic?: string | undefined;

  constructor(data?: IPartner) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data["Name"];
      this.street = _data["Street"];
      this.city = _data["City"];
      this.zip = _data["Zip"];
      this.country = _data["Country"];
      this.ic = _data["Ic"];
      this.dic = _data["Dic"];
    }
  }

  static fromJS(data: any): Partner {
    data = typeof data === 'object' ? data : {};
    let result = new Partner();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Name"] = this.name;
    data["Street"] = this.street;
    data["City"] = this.city;
    data["Zip"] = this.zip;
    data["Country"] = this.country;
    data["Ic"] = this.ic;
    data["Dic"] = this.dic;
    super.toJSON(data);
    return data;
  }
}

export interface IPartner extends IBaseEntity {
  name?: string | undefined;
  street?: string | undefined;
  city?: string | undefined;
  zip?: string | undefined;
  country?: string | undefined;
  ic?: string | undefined;
  dic?: string | undefined;
}

export class PartnerPerson extends BaseEntity implements IPartnerPerson {
  partnerId?: number | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  title?: string | undefined;
  email?: string | undefined;

  constructor(data?: IPartnerPerson) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.partnerId = _data["PartnerId"];
      this.name = _data["Name"];
      this.surname = _data["Surname"];
      this.title = _data["Title"];
      this.email = _data["Email"];
    }
  }

  static fromJS(data: any): PartnerPerson {
    data = typeof data === 'object' ? data : {};
    let result = new PartnerPerson();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["PartnerId"] = this.partnerId;
    data["Name"] = this.name;
    data["Surname"] = this.surname;
    data["Title"] = this.title;
    data["Email"] = this.email;
    super.toJSON(data);
    return data;
  }
}

export interface IPartnerPerson extends IBaseEntity {
  partnerId?: number | undefined;
  name?: string | undefined;
  surname?: string | undefined;
  title?: string | undefined;
  email?: string | undefined;
}